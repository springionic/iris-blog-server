// Code generated by entc, DO NOT EDIT.

package ent

import (
	"iris-blog-server/ent/article"
	"iris-blog-server/ent/schema"
	"iris-blog-server/ent/tag"
	"iris-blog-server/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescDeleteTime is the schema descriptor for delete_time field.
	articleDescDeleteTime := articleMixinFields0[0].Descriptor()
	// article.DefaultDeleteTime holds the default value on creation for the delete_time field.
	article.DefaultDeleteTime = articleDescDeleteTime.Default.(func() time.Time)
	// articleDescCreateTime is the schema descriptor for create_time field.
	articleDescCreateTime := articleMixinFields0[1].Descriptor()
	// article.DefaultCreateTime holds the default value on creation for the create_time field.
	article.DefaultCreateTime = articleDescCreateTime.Default.(func() time.Time)
	// articleDescUpdateTime is the schema descriptor for update_time field.
	articleDescUpdateTime := articleMixinFields0[2].Descriptor()
	// article.DefaultUpdateTime holds the default value on creation for the update_time field.
	article.DefaultUpdateTime = articleDescUpdateTime.Default.(func() time.Time)
	// article.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	article.UpdateDefaultUpdateTime = articleDescUpdateTime.UpdateDefault.(func() time.Time)
	tagMixin := schema.Tag{}.Mixin()
	tagMixinFields0 := tagMixin[0].Fields()
	_ = tagMixinFields0
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescDeleteTime is the schema descriptor for delete_time field.
	tagDescDeleteTime := tagMixinFields0[0].Descriptor()
	// tag.DefaultDeleteTime holds the default value on creation for the delete_time field.
	tag.DefaultDeleteTime = tagDescDeleteTime.Default.(func() time.Time)
	// tagDescCreateTime is the schema descriptor for create_time field.
	tagDescCreateTime := tagMixinFields0[1].Descriptor()
	// tag.DefaultCreateTime holds the default value on creation for the create_time field.
	tag.DefaultCreateTime = tagDescCreateTime.Default.(func() time.Time)
	// tagDescUpdateTime is the schema descriptor for update_time field.
	tagDescUpdateTime := tagMixinFields0[2].Descriptor()
	// tag.DefaultUpdateTime holds the default value on creation for the update_time field.
	tag.DefaultUpdateTime = tagDescUpdateTime.Default.(func() time.Time)
	// tag.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	tag.UpdateDefaultUpdateTime = tagDescUpdateTime.UpdateDefault.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescDeleteTime is the schema descriptor for delete_time field.
	userDescDeleteTime := userMixinFields0[0].Descriptor()
	// user.DefaultDeleteTime holds the default value on creation for the delete_time field.
	user.DefaultDeleteTime = userDescDeleteTime.Default.(func() time.Time)
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[1].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[2].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[0].Descriptor()
	// user.DefaultNickName holds the default value on creation for the nick_name field.
	user.DefaultNickName = userDescNickName.Default.(string)
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = func() func(string) error {
		validators := userDescNickName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(nick_name string) error {
			for _, fn := range fns {
				if err := fn(nick_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
